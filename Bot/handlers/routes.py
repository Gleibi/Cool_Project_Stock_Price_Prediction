from aiogram.filters import Command, StateFilter
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from Bot.models import main_models
from Bot.charts import get_company_info, get_data, plot_total_data, plot_candelstick_chart
from Bot.keyboards.for_questions import get_company
from Bot.handlers.main_state import GetInfo
from Bot.handlers.company_name import cmd_save_company_name
import os

import re

router = Router()

from aiogram.types.input_file import InputFile
from PIL import Image
import io

def convert_to_grayscale(image_path="ozon.png"):
    img = Image.open(image_path).convert('L')

    buf = io.BytesIO()
    img.save(buf, format='png')
    buf.seek(0)
    return buf


@router.message(StateFilter(None), Command("prediction"))
async def cmd_prediction(message: Message, state: FSMContext):
    data = await state.get_data()

    company_name = data['company_name']
    await message.answer('–ì–∞–¥–∞–Ω–∏–µ –∑–∞–π–º–µ—Ç –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—èü™Ñ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ!')

    pred = main_models(company_name)

    sign = -1 if pred < 0 else 1
    m = '—É–ø–∞–¥–µ—Ç' if pred < 0 else '–≤—ã—Ä–∞—Å—Ç–µ—Ç'

    company_info = get_company_info(company_name=company_name, param_info='total')
    fullname = company_info['shortName']
    currency = company_info['financialCurrency']

    mess = [
      f'–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏ {fullname} {m} –Ω–∞ {round(pred[0], 2) * sign} {currency}.\n',
        '–ù–æ –ø–æ–º–Ω–∏, —è –≤—Å–µ–≥–æ –ª–∏—à—å –∫–æ—Ç–∏–∫ —Å –ª–∞–ø–∫–∞–º–∏. –ù–µ –≤—Å–µ –º–æ–∏ –ø—Ä–æ–≥–Ω–æ–∑—ã —Ç–æ—á–Ω—ã.'
    ]
    await message.answer(''.join(mess),
                         reply_markup=ReplyKeyboardRemove())


@router.message(StateFilter(None), Command("recommendation"))
async def cmd_recommendation(message: Message, state: FSMContext):
    data = await state.get_data()

    company_name = data['company_name']
    await message.answer('–ì–∞–¥–∞–Ω–∏–µ –∑–∞–π–º–µ—Ç –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—èü™Ñ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ!')

    company_info = get_company_info(company_name=company_name, param_info='total')

    rec = '–∫—É–ø–∏ –±–æ–ª—å—à–µ –∞–∫—Ü–∏–π, –¥—Ä—É–∂–æ—á–µ–∫. ' if company_info[
                'recommendationKey'] == 'buy' else '–ø—Ä–æ–¥–∞–≤–∞–π –∞–∫—Ü–∏–∏, –¥—Ä—É–∂–æ—á–µ–∫. –°–µ–π—á–∞—Å —Å–∞–º–æ–µ –≤—Ä–µ–º—è.'

    mess = [f'–ú–æ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è - {rec}\n',
            '–ù–æ –ø–æ–º–Ω–∏, —è –≤—Å–µ–≥–æ –ª–∏—à—å –∫–æ—Ç–∏–∫ —Å –ª–∞–ø–∫–∞–º–∏. –ù–µ –≤—Å–µ –º–æ–∏ –ø—Ä–æ–≥–Ω–æ–∑—ã —Ç–æ—á–Ω—ã.']

    await message.answer(''.join(mess),
                         reply_markup=ReplyKeyboardRemove())


@router.message(StateFilter(None), Command("news"))
async def cmd_news(message: Message, state: FSMContext):
    data = await state.get_data()

    company_name = data['company_name']
    await message.answer('–ü–æ–∏—Å–∫ –∑–∞–π–º–µ—Ç –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—èü™Ñ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ!')

    news = get_company_info(company_name=company_name, param_info='news')

    mess = ''

    for n in news:
        mess += '–ò–∑–¥–∞–Ω–∏–µ: ' + n['publisher'] + '\n'
        mess += '–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏: ' + n['title'] + '\n'
        mess += '–°—Å—ã–ª–∫–∞: ' + n['link'] + '\n'

    await message.answer(''.join(mess),
                         reply_markup=ReplyKeyboardRemove())


@router.message(StateFilter(None), Command("clear_company"))
async def cmd_clear_company(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–ö–∞–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
                         reply_markup=get_company())
    await state.set_state(GetInfo.waiting_for_company_name)
    await cmd_save_company_name(message, state)


@router.message(StateFilter(None), Command("dynamics_chart", "candlestick_chart"))
async def cmd_get_period(message: Message, state: FSMContext):
    await state.update_data(command=message.text)

    mess = [
        '–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∏–Ω–∞–º–∏–∫—É\? :–∑\n',
        '–ù–æ —É –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–æ—Å—å–±–∞\: –≤–≤–µ–¥–∏ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ \- `"c XXXX-XX-XX –ø–æ XXXX-XX-XX"`\.\n',
        '–ü–æ–∫–∞ —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç\, –Ω–æ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –∏ —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ —è –±—É–¥—É —É–º–µ—Ç—å –µ—â–µ –±–æ–ª—å—à–µ\!'
    ]
    await message.answer(''.join(mess),
                         parse_mode=ParseMode.MARKDOWN_V2,
                         reply_markup=ReplyKeyboardRemove())
    await state.set_state(GetInfo.waiting_for_period)


def get_picture(start, end, company_name, file_path, plot='total'):

    hist = get_data(company_name, start=start, end=end)
    if plot == 'total':
        plot_total_data(hist)
    else:
        plot_candelstick_chart(hist)

    return os.path.exists(file_path)


@router.message(StateFilter(GetInfo.waiting_for_period))
async def cmd_dynamics_chart(message: Message, state: FSMContext):

    mess = message.text

    data = await state.get_data()
    company_name = data['company_name']
    file_path = './handlers/pics/'
    command = data['command']

    file_path += 'total_data.png' if command == '/dynamics_chart' else 'candelstick_data.png'
    plot_param = 'total' if command == '/dynamics_chart' else 'candelstick'

    path = re.compile('\d{4}-\d{2}-\d{2}')

    dates = re.findall(path, mess)

    if len(dates) == 2:
        start, end = dates[0], dates[1]
        plot_flag = get_picture(start, end, company_name, file_path, plot=plot_param)
        company_info = get_company_info(company_name=company_name, param_info='total')
        fullname = company_info['shortName']
        if plot_flag:

            await message.answer_photo(photo=FSInputFile(path=file_path),
                                       caption=f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–∫—Ü–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ {fullname} –≤ –¥–∏–Ω–∞–º–∏–∫–µ")

        else:
            await message.answer('–ò–∑–≤–∏–Ω–∏, —É –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')

        await state.set_state(None)
    else:
        await message.answer('–ò–∑–≤–∏–Ω–∏, –Ω–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –ø–µ—Ä–∏–æ–¥ –µ—â–µ —Ä–∞–∑.')


@router.message(StateFilter(None), Command("end_conversation"))
async def cmd_end_conversation(message: Message, state: FSMContext):
    await message.reply('–ï—Å–ª–∏ —á—Ç–æ, –æ–±—Ä–∞—â–∞–π—Å—è!')
    await state.clear()

